#silent $setDefaultRanks(range(0,5))
#silent $addType('logical', 'LOGICAL')
#silent $addType('bool', 'LOGICAL(KIND=C_BOOL)')
#silent $addType('int', 'INTEGER')
#silent $addType('long', 'INTEGER(KIND=C_LONG)')
#silent $addType('float', 'REAL(KIND=C_FLOAT)')
#silent $addType('double', 'REAL(KIND=C_DOUBLE)')
#set $metainfoGetterTypes = [('b', 'LOGICAL'), ('i', 'INTEGER(KIND=C_INT)'),  ('l', 'INTEGER(KIND=C_LONG)'), ('f', 'REAL(KIND=C_FLOAT)'), ('d', 'REAL(KIND=C_DOUBLE)')]  
#set $metainfoSetterTypes = $metainfoGetterTypes + [('s', 'CHARACTER(LEN=*)')]   
!------------------------------------------------------------*- Fortran -*-----
!
!                              S E R I A L B O X
!
! This file is distributed under terms of BSD license.
! See LICENSE.txt for more information.
!
!------------------------------------------------------------------------------
!
!+ This module contains the FortranTestGenerator (FTG) frontend of Serialbox2.
!+ For FTG see https://github.com/fortesg/fortrantestgenerator
!
!------------------------------------------------------------------------------

MODULE m_ser_ftg

!------------------------------------------------------------------------------
!
! Description:
!
!   This module contains simplified wrapper subroutines for the Fortran interface
!   of Serialbox2 (m_serialize.f90) to be used by the FortranTestGenerator
!   (https://github.com/fortesg/fortrantestgenerator), plus additional subroutines
!   for allocating array variables based on the stored sizes and bounds.
!
! Current Code Owner: Christian Hovy, Universitaet Hamburg
!  email:  hovy@informatik.uni-hamburg.de
!
! Code Description:
! Language: Fortran 90.
! Software Standards: "European Standards for Writing and
! Documenting Exchangeable Fortran 90 Code".
!============================================================================

USE iso_c_binding
USE m_serialize

IMPLICIT NONE

PUBLIC :: ignore_bullshit, ignore_bullshit_max_dim_size, ignore_bullshit_allow_negative_indices, ignore_not_existing, &
          ftg_set_serializer, ftg_get_serializer, ftg_destroy_serializer, ftg_print_serializer_debuginfo, &
          ftg_set_savepoint, ftg_get_savepoint, ftg_destroy_savepoint, &
          ftg_add_serializer_metainfo, ftg_get_serializer_metainfo,  ftg_add_field_metainfo, ftg_get_field_metainfo, &
          ftg_add_savepoint_metainfo, ftg_get_savepoint_metainfo, &
          ftg_field_exists, ftg_get_size, ftg_get_bounds, ftg_register_only, ftg_write, ftg_read, &
          ftg_allocate_pointer, ftg_allocate_allocatable, ftg_allocate_and_read_pointer, ftg_allocate_and_read_allocatable

PRIVATE

CHARACTER(LEN=*), PARAMETER :: module_name = 'm_ser_ftg'

INTERFACE ftg_set_serializer
  MODULE PROCEDURE &
    ftg_set_serializer_create, &
    ftg_set_serializer_existing
END INTERFACE

INTERFACE ftg_set_savepoint
  MODULE PROCEDURE &
    ftg_set_savepoint_create, &
    ftg_set_savepoint_existing
END INTERFACE

INTERFACE ftg_add_serializer_metainfo
  MODULE PROCEDURE &
  #for $t, _ in $metainfoSetterTypes: 
    ftg_add_serializer_metainfo_$t$unlessIsLast(', &', $t, [t[0] for t in $metainfoSetterTypes])
  #end for
END INTERFACE

INTERFACE ftg_get_serializer_metainfo
  MODULE PROCEDURE &
  #for $t, _ in $metainfoGetterTypes:
    ftg_get_serializer_metainfo_$t$unlessIsLast(', &', $t, [t[0] for t in $metainfoGetterTypes])
  #end for
END INTERFACE

INTERFACE ftg_add_field_metainfo
  MODULE PROCEDURE &
  #for $t, _ in $metainfoSetterTypes: 
    ftg_add_field_metainfo_$t$unlessIsLast(', &', $t, [t[0] for t in $metainfoSetterTypes])
  #end for
END INTERFACE

INTERFACE ftg_get_field_metainfo
  MODULE PROCEDURE &
  #for $t, _ in $metainfoGetterTypes:
    ftg_get_field_metainfo_$t$unlessIsLast(', &', $t, [t[0] for t in $metainfoGetterTypes])
  #end for
END INTERFACE

INTERFACE ftg_add_savepoint_metainfo
  MODULE PROCEDURE &
  #for $t, _ in $metainfoSetterTypes: 
    ftg_add_savepoint_metainfo_$t$unlessIsLast(', &', $t, [t[0] for t in $metainfoSetterTypes])
  #end for
END INTERFACE

INTERFACE ftg_get_savepoint_metainfo
  MODULE PROCEDURE &
  #for $t, _ in $metainfoGetterTypes:
    ftg_get_savepoint_metainfo_$t$unlessIsLast(', &', $t, [t[0] for t in $metainfoGetterTypes])
  #end for
END INTERFACE

INTERFACE ftg_write
  MODULE PROCEDURE &
    ftg_write_string, &
  #for $td in $typesWithDimensions  
    ftg_write_${td.name}_${td.rank}d${td.unlessIsLast(', &')}
  #end for  
END INTERFACE

INTERFACE ftg_read
  MODULE PROCEDURE &
    ftg_read_string, &
  #for $td in $typesWithDimensions  
    ftg_read_${td.name}_${td.rank}d${td.unlessIsLast(', &')}
  #end for  
END INTERFACE

INTERFACE ftg_allocate_pointer
  MODULE PROCEDURE &
  #for $td in $typesWithDimensions  
    ftg_allocate_pointer_${td.name}_${td.rank}d${td.unlessIsLast(', &')}
  #end for      
END INTERFACE ftg_allocate_pointer

INTERFACE ftg_allocate_allocatable
  MODULE PROCEDURE &
  #for $td in $typesWithDimensions
    ftg_allocate_allocatable_${td.name}_${td.rank}d${td.unlessIsLast(', &')}
  #end for      
END INTERFACE ftg_allocate_allocatable

INTERFACE ftg_allocate_and_read_pointer
  MODULE PROCEDURE &
  #for $td in $typesWithDimensions  
    ftg_allocate_and_read_pointer_${td.name}_${td.rank}d${td.unlessIsLast(', &')}
  #end for  
END INTERFACE ftg_allocate_and_read_pointer

INTERFACE ftg_allocate_and_read_allocatable
  MODULE PROCEDURE &
  #for $td in $typesWithDimensions  
    ftg_allocate_and_read_allocatable_${td.name}_${td.rank}d${td.unlessIsLast(', &')}
  #end for   
END INTERFACE ftg_allocate_and_read_allocatable

LOGICAL :: ignore_bullshit = .TRUE.
INTEGER :: ignore_bullshit_max_dim_size = 999999999
LOGICAL :: ignore_bullshit_allow_negative_indices = .TRUE.
LOGICAL :: ignore_not_existing = .TRUE.

TYPE(t_serializer), POINTER :: serializer => NULL()
TYPE(t_savepoint),  POINTER :: savepoint  => NULL()

CONTAINS

!=============================================================================
!=============================================================================

SUBROUTINE ftg_set_serializer_create(directory, prefix, mode, opt_archive)

  CHARACTER(LEN=*), INTENT(IN) :: directory, prefix
  CHARACTER, INTENT(IN) :: mode
  CHARACTER(LEN=*), INTENT(IN), OPTIONAL :: opt_archive

  TYPE(t_serializer), POINTER :: new_serializer

  ALLOCATE(new_serializer)
  CALL fs_create_serializer(directory, prefix, mode, new_serializer, opt_archive)
  serializer => new_serializer

END SUBROUTINE ftg_set_serializer_create


SUBROUTINE ftg_set_serializer_existing(new_serializer)

  TYPE(t_serializer), INTENT(IN), TARGET :: new_serializer

  serializer => new_serializer

END SUBROUTINE ftg_set_serializer_existing


SUBROUTINE ftg_destroy_serializer()

  IF (ASSOCIATED(serializer)) THEN
    CALL fs_destroy_serializer(serializer)
    serializer => NULL()
  END IF

END SUBROUTINE ftg_destroy_serializer


FUNCTION ftg_get_serializer()

  TYPE(t_serializer), POINTER :: ftg_get_serializer

  IF (.NOT. ASSOCIATED(serializer)) THEN
    WRITE(*,*) TRIM(module_name)//" - ERROR: No serializer. Call ftg_set_serializer() first!"
    STOP
  ELSE
    ftg_get_serializer => serializer
  END IF

END FUNCTION ftg_get_serializer

SUBROUTINE ftg_print_serializer_debuginfo()
  CALL fs_print_debuginfo(serializer)
END SUBROUTINE ftg_print_serializer_debuginfo

!=============================================================================
!=============================================================================

SUBROUTINE ftg_set_savepoint_create(name)

  CHARACTER(LEN=*), INTENT(IN) :: name

  TYPE(t_savepoint), POINTER :: new_savepoint

  ALLOCATE(new_savepoint)
  CALL fs_create_savepoint(name, new_savepoint)
  savepoint => new_savepoint

END SUBROUTINE ftg_set_savepoint_create


SUBROUTINE ftg_set_savepoint_existing(new_savepoint)

  TYPE(t_savepoint), INTENT(IN), TARGET :: new_savepoint

  savepoint => new_savepoint

END SUBROUTINE ftg_set_savepoint_existing


SUBROUTINE ftg_destroy_savepoint()

  IF (ASSOCIATED(savepoint)) THEN
    CALL fs_destroy_savepoint(savepoint)
    savepoint => NULL()
  END IF

END SUBROUTINE ftg_destroy_savepoint


TYPE(t_savepoint) FUNCTION ftg_get_savepoint()

  IF (.NOT. ASSOCIATED(savepoint)) THEN
    WRITE(*,*) TRIM(module_name)//" - ERROR: No savepoint. Call ftg_set_savepoint() first!"
    STOP
  ELSE
    ftg_get_savepoint = savepoint
  END IF

END FUNCTION ftg_get_savepoint

!=============================================================================
!=============================================================================

LOGICAL FUNCTION ftg_field_exists(fieldname)

  CHARACTER(LEN=*), INTENT(IN) :: fieldname

  ftg_field_exists = fs_field_exists(serializer,  fieldname)

END FUNCTION ftg_field_exists

!=============================================================================
!=============================================================================

FUNCTION ftg_get_size(fieldname)

  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  INTEGER, DIMENSION(4) :: ftg_get_size

  ftg_get_size = fs_get_size(serializer,  fieldname)

END FUNCTION ftg_get_size

FUNCTION ftg_get_bounds(fieldname)

  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  INTEGER, DIMENSION(8) :: ftg_get_bounds

  ftg_get_bounds = fs_get_halos(serializer,  fieldname)

END FUNCTION ftg_get_bounds

!=============================================================================
!=============================================================================

#for $t, $datatype in $metainfoSetterTypes:
SUBROUTINE ftg_add_serializer_metainfo_${t}(key, val)
  CHARACTER(LEN=*), INTENT(IN) :: key
  $datatype, INTENT(IN) :: val
  CALL fs_add_serializer_metainfo(serializer, key, val)
END SUBROUTINE ftg_add_serializer_metainfo_$t

#end for
!=============================================================================
!=============================================================================

#for $t, $datatype in $metainfoGetterTypes:
SUBROUTINE ftg_get_serializer_metainfo_${t}(key, val)
  CHARACTER(LEN=*), INTENT(IN) :: key
  $datatype, INTENT(OUT) :: val
  CALL fs_get_serializer_metainfo(serializer, key, val)
END SUBROUTINE ftg_get_serializer_metainfo_$t

#end for

!=============================================================================
!=============================================================================

#for $t, $datatype in $metainfoSetterTypes:
SUBROUTINE ftg_add_field_metainfo_${t}(fieldname, key, val)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname, key
  $datatype, INTENT(IN) :: val
  CALL fs_add_field_metainfo(serializer, fieldname, key, val)
END SUBROUTINE ftg_add_field_metainfo_$t

#end for
!=============================================================================
!=============================================================================

#for $t, $datatype in $metainfoGetterTypes:
SUBROUTINE ftg_get_field_metainfo_${t}(fieldname, key, val)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname, key
  $datatype, INTENT(OUT) :: val
  CALL fs_get_field_metainfo(serializer, fieldname, key, val)
END SUBROUTINE ftg_get_field_metainfo_$t

#end for
!=============================================================================
!=============================================================================

#for $t, $datatype in $metainfoSetterTypes:
SUBROUTINE ftg_add_savepoint_metainfo_${t}(key, val)
  CHARACTER(LEN=*), INTENT(IN) :: key
  $datatype, INTENT(IN) :: val
  CALL fs_add_savepoint_metainfo(savepoint, key, val)
END SUBROUTINE ftg_add_savepoint_metainfo_$t

#end for
!=============================================================================
!=============================================================================

#for $t, $datatype in $metainfoGetterTypes:
SUBROUTINE ftg_get_savepoint_metainfo_${t}(key, val)
  CHARACTER(LEN=*), INTENT(IN) :: key
  $datatype, INTENT(OUT) :: val
  CALL fs_get_savepoint_metainfo(savepoint, key, val)
END SUBROUTINE ftg_get_savepoint_metainfo_$t

#end for
!=============================================================================
!=============================================================================

SUBROUTINE ftg_register_only(fieldname, typename, lbounds, ubounds, cptr)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  CHARACTER(LEN=*), INTENT(IN), OPTIONAL :: typename
  INTEGER, INTENT(IN), OPTIONAL :: lbounds(:), ubounds(:)
  TYPE(C_PTR), INTENT(IN), OPTIONAL :: cptr

  LOGICAL :: bullshit
  CHARACTER(16) :: loc
  INTEGER :: sizes(4), bounds(8), i

  sizes  = (/ 1, 0, 0, 0 /)
  bounds = (/ 0, 0, 0, 0, 0, 0, 0, 0 /)

  bullshit = .FALSE.
  if (ignore_bullshit) THEN
    bullshit = PRESENT(lbounds) .NEQV. PRESENT(ubounds)
    IF (.NOT. bullshit .AND. PRESENT(lbounds)) THEN
      bullshit = SIZE(lbounds) /= SIZE(ubounds)
      IF (.NOT. bullshit .AND. .NOT. ignore_bullshit_allow_negative_indices) THEN
        bullshit = ANY(lbounds < 0) .OR. ANY(ubounds < 0)
      END IF
      IF (.NOT. bullshit) THEN
        DO i = 1, SIZE(lbounds)
          sizes(i) = ubounds(i) - lbounds(i) + 1
          bounds(i * 2 - 1) = lbounds(i)
          bounds(i * 2) = ubounds(i)
        END DO
        bullshit = ANY(sizes > ignore_bullshit_max_dim_size)
      END IF
    END IF
  END IF

  IF (.NOT. bullshit) THEN
    CALL fs_register_field(serializer, fieldname, 'int', 4, sizes(1), sizes(2), sizes(3), sizes(4), &
                           bounds(1), bounds(2), bounds(3), bounds(4), bounds(5), bounds(6), bounds(7), bounds(8))
    CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:registered_only', .TRUE.)
    IF (PRESENT(typename)) THEN
      CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:type', TRIM(typename))
    END IF
    IF (PRESENT(cptr)) THEN
      CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:loc', TRIM(ftg_loc_hex(cptr)))
    END IF
  END IF

END SUBROUTINE ftg_register_only

SUBROUTINE ftg_register_only_internal(fieldname, data_type, bytes_per_element, lbounds, ubounds)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  CHARACTER(LEN=*), INTENT(IN) :: data_type
  INTEGER, INTENT(IN) :: bytes_per_element, lbounds(:), ubounds(:)

  INTEGER :: sizes(4), bounds(8), i

  sizes  = (/ 1, 0, 0, 0 /)
  bounds = (/ 0, 0, 0, 0, 0, 0, 0, 0 /)

  DO i = 1, SIZE(lbounds)
    sizes(i) = ubounds(i) - lbounds(i) + 1
    bounds(i * 2 - 1) = lbounds(i)
    bounds(i * 2) = ubounds(i)
  END DO

  CALL fs_register_field(serializer, fieldname, data_type, bytes_per_element, sizes(1), sizes(2), sizes(3), sizes(4), &
                         bounds(1), bounds(2), bounds(3), bounds(4), bounds(5), bounds(6), bounds(7), bounds(8))
  CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:registered_only', .TRUE.)

END SUBROUTINE ftg_register_only_internal

!=============================================================================
!=============================================================================

FUNCTION ftg_loc(field)

  TYPE(C_PTR), INTENT(in) :: field
  INTEGER(KIND=C_INTPTR_T) :: ftg_loc

  INTERFACE
     SUBROUTINE ftg_loc_(field, loc) &
          BIND(c, name='serialboxFortranLoc')
       USE, INTRINSIC :: iso_c_binding
       TYPE(C_PTR), INTENT(IN), VALUE :: field
       INTEGER(C_INTPTR_T), INTENT(OUT) :: loc
     END SUBROUTINE ftg_loc_
  END INTERFACE

  CALL ftg_loc_(field, ftg_loc)

END FUNCTION ftg_loc

FUNCTION ftg_loc_hex(field)

  TYPE(C_PTR), INTENT(in) :: field
  CHARACTER(16) :: ftg_loc_hex

  WRITE (ftg_loc_hex,'(Z16)') ftg_loc(field)

END FUNCTION ftg_loc_hex

!=============================================================================
!=============================================================================

SUBROUTINE ftg_write_string(fieldname, field)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  CHARACTER(LEN=*), INTENT(IN), TARGET :: field

  CHARACTER(LEN=LEN(field)), POINTER :: padd
  LOGICAL :: bullshit

  padd => field
  bullshit = .FALSE.
  IF (ignore_bullshit) THEN
    bullshit = .NOT. ASSOCIATED(padd)
  END IF

  IF (.NOT. bullshit) THEN
    CALL fs_write_field(ftg_get_serializer(), ftg_get_savepoint(), fieldname, field)
    CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:registered_only', .FALSE.)
    CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:loc', TRIM(ADJUSTL(ftg_loc_hex(C_LOC(field)))))
  END IF

END SUBROUTINE ftg_write_string

#for $t in $types
#if $t.name == 'logical'
#set $sbname = 'bool'
#else 
#set $sbname = $t.name
#end if
SUBROUTINE ftg_write_${t.name}_0d(fieldname, field)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  ${t.datatype}, INTENT(IN), TARGET :: field

  ${t.datatype}, POINTER :: padd
  LOGICAL :: bullshit

  padd => field
  bullshit = .FALSE.
  IF (ignore_bullshit) THEN
    bullshit = .NOT. ASSOCIATED(padd)
  END IF

  IF (.NOT. bullshit) THEN
    CALL fs_write_field(ftg_get_serializer(), ftg_get_savepoint(), fieldname, field)
    CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:registered_only', .FALSE.)
    CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:loc', TRIM(ADJUSTL(ftg_loc_hex(C_LOC(field)))))
  END IF

END SUBROUTINE ftg_write_${t.name}_0d

SUBROUTINE ftg_write_${t.name}_1d(fieldname, field, lbounds, ubounds)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  ${t.datatype}, INTENT(IN), TARGET :: field(:)
  INTEGER, INTENT(IN) :: lbounds(1), ubounds(1)

  ${t.datatype}, POINTER :: padd(:)
  LOGICAL :: bullshit

  padd=>field
  bullshit = .FALSE.
  if (ignore_bullshit) THEN
    bullshit = .NOT. ASSOCIATED(padd) .OR. SIZE(field, 1) > ignore_bullshit_max_dim_size
    IF (.NOT. bullshit .AND. .NOT. ignore_bullshit_allow_negative_indices) THEN
      bullshit = lbounds(1) < 0 .OR. ubounds(1) < 0
    END IF
  END IF

  IF (.NOT. bullshit) THEN
    IF (SIZE(field) > 0) THEN
      CALL fs_write_field(ftg_get_serializer(), ftg_get_savepoint(), fieldname, field, lbounds, ubounds)
      CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:registered_only', .FALSE.)
    ELSE
      CALL ftg_register_only_internal(fieldname, '${sbname}', fs_${sbname}size(), lbounds, ubounds)
    END IF
    CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:loc', TRIM(ADJUSTL(ftg_loc_hex(C_LOC(field)))))
  END IF

END SUBROUTINE ftg_write_${t.name}_1d

SUBROUTINE ftg_write_${t.name}_2d(fieldname, field, lbounds, ubounds)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  ${t.datatype}, INTENT(IN), TARGET :: field(:,:)
  INTEGER, INTENT(IN) :: lbounds(2), ubounds(2)

  ${t.datatype}, POINTER :: padd(:,:)
  LOGICAL :: bullshit

  padd=>field
  bullshit = .FALSE.
  if (ignore_bullshit) THEN
    bullshit = .NOT. ASSOCIATED(padd) .OR. &
               SIZE(field, 1) > ignore_bullshit_max_dim_size .OR. &
               SIZE(field, 2) > ignore_bullshit_max_dim_size
    IF (.NOT. bullshit .AND. .NOT. ignore_bullshit_allow_negative_indices) THEN
      bullshit = ANY(lbounds < 0) .OR. ANY(ubounds < 0)
    END IF
  END IF

  IF (.NOT. bullshit) THEN
    IF (SIZE(field) > 0) THEN
      CALL fs_write_field(ftg_get_serializer(), ftg_get_savepoint(), fieldname, field, lbounds, ubounds)
      CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:registered_only', .FALSE.)
    ELSE
      CALL ftg_register_only_internal(fieldname, '${sbname}', fs_${sbname}size(), lbounds, ubounds)
    END IF
    CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:loc', TRIM(ADJUSTL(ftg_loc_hex(C_LOC(field)))))
  END IF

END SUBROUTINE ftg_write_${t.name}_2d

SUBROUTINE ftg_write_${t.name}_3d(fieldname, field, lbounds, ubounds)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  ${t.datatype}, INTENT(IN), TARGET :: field(:,:,:)
  INTEGER, INTENT(IN) :: lbounds(3), ubounds(3)

  ${t.datatype}, POINTER :: padd(:,:,:)
  LOGICAL :: bullshit
  CHARACTER(16) :: loc

  padd=>field
  bullshit = .FALSE.
  if (ignore_bullshit) THEN
    bullshit = .NOT. ASSOCIATED(padd) .OR. &
               SIZE(field, 1) > ignore_bullshit_max_dim_size .OR. &
               SIZE(field, 2) > ignore_bullshit_max_dim_size .OR. &
               SIZE(field, 3) > ignore_bullshit_max_dim_size
    IF (.NOT. bullshit .AND. .NOT. ignore_bullshit_allow_negative_indices) THEN
      bullshit = ANY(lbounds < 0) .OR. ANY(ubounds < 0)
    END IF
  END IF

  IF (.NOT. bullshit) THEN
    IF (SIZE(field) > 0) THEN
      CALL fs_write_field(ftg_get_serializer(), ftg_get_savepoint(), fieldname, field, lbounds, ubounds)
      CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:registered_only', .FALSE.)
    ELSE
      CALL ftg_register_only_internal(fieldname, '${sbname}', fs_${sbname}size(), lbounds, ubounds)
    END IF
    CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:loc', TRIM(ADJUSTL(ftg_loc_hex(C_LOC(field)))))
  END IF

END SUBROUTINE ftg_write_${t.name}_3d

SUBROUTINE ftg_write_${t.name}_4d(fieldname, field, lbounds, ubounds)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  ${t.datatype}, INTENT(IN), TARGET :: field(:,:,:,:)
  INTEGER, INTENT(IN) :: lbounds(4), ubounds(4)

  ${t.datatype}, POINTER :: padd(:,:,:,:)
  LOGICAL :: bullshit

  padd=>field
  bullshit = .FALSE.
  if (ignore_bullshit) THEN
    bullshit = .NOT. ASSOCIATED(padd) .OR. &
               SIZE(field, 1) > ignore_bullshit_max_dim_size .OR. &
               SIZE(field, 2) > ignore_bullshit_max_dim_size .OR. &
               SIZE(field, 3) > ignore_bullshit_max_dim_size .OR. &
               SIZE(field, 4) > ignore_bullshit_max_dim_size
    IF (.NOT. bullshit .AND. .NOT. ignore_bullshit_allow_negative_indices) THEN
      bullshit = ANY(lbounds < 0) .OR. ANY(ubounds < 0)
    END IF
  END IF

  IF (.NOT. bullshit) THEN
    IF (SIZE(field) > 0) THEN
      CALL fs_write_field(ftg_get_serializer(), ftg_get_savepoint(), fieldname, field, lbounds, ubounds)
      CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:registered_only', .FALSE.)
    ELSE
      CALL ftg_register_only_internal(fieldname, '${sbname}', fs_${sbname}size(), lbounds, ubounds)
    END IF
    CALL ftg_add_field_metainfo(TRIM(fieldname), 'ftg:loc', TRIM(ADJUSTL(ftg_loc_hex(C_LOC(field)))))
  END IF

END SUBROUTINE ftg_write_${t.name}_4d

#end for
!=============================================================================
!=============================================================================

SUBROUTINE ftg_read_string(fieldname, field, rperturb)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  CHARACTER(LEN=*), INTENT(OUT), TARGET :: field
  REAL, INTENT(IN), OPTIONAL   :: rperturb
  LOGICAL :: registered_only

  IF (.NOT. ignore_not_existing .OR. ftg_field_exists(fieldname)) THEN
    CALL ftg_get_field_metainfo(fieldname, 'ftg:registered_only', registered_only)
    IF (.NOT. registered_only) THEN
      CALL fs_read_field(serializer, savepoint, fieldname, field, rperturb)
    END IF
  END IF
END SUBROUTINE ftg_read_string

#for $td in $typesWithDimensions
SUBROUTINE ftg_read_${td.name}_${td.rank}d(fieldname, field, rperturb)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  ${td.datatype}, INTENT(OUT), TARGET :: field${td.dimensions}
  REAL, INTENT(IN), OPTIONAL   :: rperturb
  LOGICAL :: registered_only

  IF (.NOT. ignore_not_existing .OR. ftg_field_exists(fieldname)) THEN
    CALL ftg_get_field_metainfo(fieldname, 'ftg:registered_only', registered_only)
    IF (.NOT. registered_only) THEN
      CALL fs_read_field(serializer, savepoint, fieldname, field, rperturb)
    END IF
  END IF
END SUBROUTINE ftg_read_${td.name}_${td.rank}d

#end for
!=============================================================================
!=============================================================================

#for $td in $typesWithDimensions
SUBROUTINE ftg_allocate_pointer_${td.name}_${td.rank}d(fieldname, field)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  ${td.datatype}, INTENT(OUT), POINTER :: field${td.dimensions}
  #if $td.rank > 0
  INTEGER, DIMENSION(8) :: bounds
  #end if
  
  NULLIFY(field)
  IF (ftg_field_exists(fieldname)) THEN
    #if $td.rank > 0
    bounds = ftg_get_bounds(fieldname)
    #end if
    ALLOCATE(field${td.dimensions(['bounds(1)', 'bounds(3)', 'bounds(5)', 'bounds(7)'], ['bounds(2)', 'bounds(4)', 'bounds(6)', 'bounds(8)'])})
  END IF

END SUBROUTINE ftg_allocate_pointer_${td.name}_${td.rank}d

#end for
!=============================================================================
!=============================================================================

#for $td in $typesWithDimensions
SUBROUTINE ftg_allocate_allocatable_${td.name}_${td.rank}d(fieldname, field)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  ${td.datatype}, INTENT(OUT), ALLOCATABLE :: field${td.dimensions}
  #if $td.rank > 0
  INTEGER, DIMENSION(8) :: bounds
  #end if

  IF (ALLOCATED(field)) THEN
    DEALLOCATE(field)
  END IF
  IF (ftg_field_exists(fieldname)) THEN
    #if $td.rank > 0
    bounds = ftg_get_bounds(fieldname)
    #end if
    ALLOCATE(field${td.dimensions(['bounds(1)', 'bounds(3)', 'bounds(5)', 'bounds(7)'], ['bounds(2)', 'bounds(4)', 'bounds(6)', 'bounds(8)'])})
  END IF

END SUBROUTINE ftg_allocate_allocatable_${td.name}_${td.rank}d

#end for
!=============================================================================
!=============================================================================

#for $td in $typesWithDimensions
SUBROUTINE ftg_allocate_and_read_pointer_${td.name}_${td.rank}d(fieldname, field, rperturb)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  ${td.datatype}, INTENT(INOUT), POINTER :: field${td.dimensions}
  REAL, INTENT(IN), OPTIONAL   :: rperturb
  LOGICAL :: registered_only

  IF (.NOT. ignore_not_existing .OR. ftg_field_exists(fieldname)) THEN
    CALL ftg_allocate_pointer(fieldname, field)
    CALL ftg_read(fieldname, field, rperturb)
  END IF
END SUBROUTINE ftg_allocate_and_read_pointer_${td.name}_${td.rank}d

#end for
!=============================================================================
!=============================================================================

#for $td in $typesWithDimensions
SUBROUTINE ftg_allocate_and_read_allocatable_${td.name}_${td.rank}d(fieldname, field, rperturb)
  CHARACTER(LEN=*), INTENT(IN) :: fieldname
  ${td.datatype}, INTENT(INOUT), ALLOCATABLE, TARGET :: field${td.dimensions}
  REAL, INTENT(IN), OPTIONAL   :: rperturb
  LOGICAL :: registered_only

  IF (.NOT. ignore_not_existing .OR. ftg_field_exists(fieldname)) THEN
    CALL ftg_allocate_allocatable(fieldname, field)
    CALL ftg_read(fieldname, field, rperturb)
  END IF
END SUBROUTINE ftg_allocate_and_read_allocatable_${td.name}_${td.rank}d

#end for
END MODULE m_ser_ftg
